# nordloc
# retrieve server list from https://api.nordvpn.com/server
# lookup lat/long of US nodes to get nearest city
# associate nodes with locations
# generate ovpn files based on your own preferences

Sources:
NordVPN Manual Connection archive: https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
NordVPN servers.json detailed server list from NordVPN API: https://api.nordvpn.com/server

This is a work-in-progress.  It provides the basics to get a job done.  No level of completeness or
maturity is assumed or implied.

This product includes data created by MaxMind, available from
http://www.maxmind.com/"

Intro
-----
So you want to (or are being voluntold to) use NordVPN, but you don't like/can't use the NordVPN
client?  That's fine. But then you discover there's no easy way to determine where in the world 
the nodes are the way the NordVPN client does.

This is the situation I was in.  Say for whatever purpose I was using NordVPN for, I wanted to pop
out in Chicago specifically. With the NordVPN client I could do that, but it's not so easy with the
manual connection method. The node OVPN files supplied are simply named us####.  

So I started down the path of how to rename them to their actual location.

Fortunately, Nord provides an API, referenced above, which gives you a list of all nodes at any
given time.  Each record provides lots of info on the node, including the lat/long and feature sets.
It took very little time to create a program that would cycle through all the nodes and create a new
table with the information you need, or alternatively just write OVPN files for you which are named
for their location.

At first I was just going to rename the .ovpn files to add their location. Then I realized the ovpn.zip
file provided by NordVPN doesn't match up with the server list generated by the API.  Assuming the API
is more correct, I decided to just generate my own ovpn files using the original files as a template, 
and just subbing in the IP address.  

Steps:

1. Get worldcitiespop csv from Maxmind: http://www.maxmind.com/download/worldcities/worldcitiespop.txt.gz
Drop that into a sql database. A structure .sql file is provided for importing into MySQL.  

2. Edit and run the makefiles script. It will run through the server json file supplied by the API,
check the lat/long against the worldcities table to find the closest city to those coordinates, and then
spit out a properly-named ovpn file in the newovpn directory. In my working example, you can see by
the shitty if statements that I filtered by "Standard VPN," "US" and "openvpn_udp."  You may choose
otherwise.

3. Optionally, the parseme script will populate the nodes table if you prefer to work in mysql.

The advantage to filenames including the location is that you can easily write a drop-down VPN chooser.

Feedback is welcome. Yes I know some of the approaches are shitty. I'm not a python expert and I just
wanted the end product, which I got.
